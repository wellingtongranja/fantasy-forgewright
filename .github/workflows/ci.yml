name: Continuous Integration

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint code
      run: npm run lint
    
    - name: Check formatting
      run: npm run format:check
    
    - name: Run unit tests
      run: npm run test:unit
    
    - name: Run integration tests
      run: npm run test:integration
    
    - name: Build application
      run: npm run build
    
    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(du -sb dist | cut -f1)
        GZIPPED_SIZE=$(gzip -c dist/assets/*.js | wc -c 2>/dev/null || echo "0")
        MAX_SIZE=1048576
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "Bundle size ($BUNDLE_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
          exit 1
        fi
        echo "Bundle size: $BUNDLE_SIZE bytes (${GZIPPED_SIZE} gzipped)"
        echo "BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV
        echo "GZIPPED_SIZE=$GZIPPED_SIZE" >> $GITHUB_ENV
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      if: matrix.node-version == '20.x'

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: |
        npm run security-audit
        npm audit --audit-level=high --production
    
    - name: Run SAST scan
      uses: github/super-linter@v6
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_CSS: true
        VALIDATE_HTML: true
        VALIDATE_JSON: true
        VALIDATE_YAML: true
        VALIDATE_MARKDOWN: true
        FILTER_REGEX_EXCLUDE: 'node_modules/.*'

  accessibility:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start preview server
      run: |
        npm run preview &
        sleep 10
        echo "Server started on http://localhost:4173"
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: './lighthouse.config.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
        runs: 3
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  deployment-readiness:
    runs-on: ubuntu-latest
    name: Deployment Readiness Validation
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run deployment configuration validation
      run: npm test -- tests/deployment/config-validation.test.js
      continue-on-error: false
    
    - name: Run build integrity tests
      run: npm test -- tests/deployment/build-integrity.test.js
      continue-on-error: false
    
    - name: Run production simulation tests
      run: npm test -- tests/deployment/production-simulation.test.js
      continue-on-error: false
    
    - name: Generate deployment readiness report
      run: |
        echo "## 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Configuration validation passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Build integrity tests passed" >> $GITHUB_STEP_SUMMARY  
        echo "✅ Production simulation tests passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: Ready for deployment 🎉" >> $GITHUB_STEP_SUMMARY
      if: success()
    
    - name: Report deployment issues
      run: |
        echo "## ❌ Deployment Readiness Issues Found" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: Not ready for deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Please fix the failing tests before deploying to production." >> $GITHUB_STEP_SUMMARY
        echo "See test output above for specific issues and fixes." >> $GITHUB_STEP_SUMMARY
      if: failure()
