{
  "version": 3,
  "sources": ["../bundle-obXeUO/checked-fetch.js", "../bundle-obXeUO/strip-cf-connecting-ip-header.js", "../../../providers/base-provider.js", "../../../providers/github.js", "../../../providers/gitlab.js", "../../../providers/bitbucket.js", "../../../providers/generic-git.js", "../../../oauth-proxy.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-obXeUO/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-obXeUO/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/.wrangler/tmp/dev-ux55GW",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "/**\n * BaseProvider - Abstract base class for Git provider OAuth implementations\n * Defines common interface and shared functionality for all Git providers\n */\nexport class BaseProvider {\n  constructor(config = {}) {\n    this.clientId = config.clientId\n    this.clientSecret = config.clientSecret\n    this.redirectUri = config.redirectUri\n    this.scopes = config.scopes || []\n  }\n\n  /**\n   * Get provider name (must be implemented by subclasses)\n   * @returns {string} Provider name (e.g., 'github', 'gitlab')\n   */\n  get name() {\n    throw new Error('Provider name must be implemented by subclass')\n  }\n\n  /**\n   * Get OAuth authorization URL (must be implemented by subclasses)\n   * @returns {string} Authorization URL\n   */\n  get authorizationUrl() {\n    throw new Error('Authorization URL must be implemented by subclass')\n  }\n\n  /**\n   * Get OAuth token exchange URL (must be implemented by subclasses)\n   * @returns {string} Token URL\n   */\n  get tokenUrl() {\n    throw new Error('Token URL must be implemented by subclass')\n  }\n\n  /**\n   * Get user info API URL (must be implemented by subclasses)\n   * @returns {string} User API URL\n   */\n  get userApiUrl() {\n    throw new Error('User API URL must be implemented by subclass')\n  }\n\n  /**\n   * Exchange authorization code for access token\n   * @param {string} code - Authorization code from OAuth callback\n   * @param {string} [codeVerifier] - PKCE code verifier (optional)\n   * @returns {Promise<Object>} Token response\n   */\n  async exchangeCodeForToken(code, codeVerifier = null) {\n    if (!code) {\n      throw new Error('Authorization code is required')\n    }\n\n    const tokenParams = this.buildTokenParams(code, codeVerifier)\n    \n    try {\n      const response = await fetch(this.tokenUrl, {\n        method: 'POST',\n        headers: this.getTokenHeaders(),\n        body: this.formatTokenRequest(tokenParams)\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        throw new Error(`Token exchange failed: ${response.status} - ${errorText}`)\n      }\n\n      const data = await response.json()\n      \n      if (data.error) {\n        throw new Error(`OAuth error: ${data.error_description || data.error}`)\n      }\n\n      return this.processTokenResponse(data)\n    } catch (error) {\n      throw new Error(`Token exchange failed: ${error.message}`)\n    }\n  }\n\n  /**\n   * Fetch user information using access token\n   * @param {string} accessToken - OAuth access token\n   * @returns {Promise<Object>} User information\n   */\n  async fetchUserInfo(accessToken) {\n    if (!accessToken) {\n      throw new Error('Access token is required')\n    }\n\n    try {\n      const response = await fetch(this.userApiUrl, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        const errorText = await response.text()\n        throw new Error(`User info fetch failed: ${response.status} - ${errorText}`)\n      }\n\n      const userData = await response.json()\n      return this.processUserData(userData)\n    } catch (error) {\n      throw new Error(`Failed to fetch user info: ${error.message}`)\n    }\n  }\n\n  /**\n   * Build token exchange parameters (can be overridden by providers)\n   * @param {string} code - Authorization code\n   * @param {string} [codeVerifier] - PKCE code verifier\n   * @returns {Object} Token parameters\n   */\n  buildTokenParams(code, codeVerifier = null) {\n    const params = {\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      code: code,\n      redirect_uri: this.redirectUri\n    }\n\n    // Add PKCE code verifier if provided\n    if (codeVerifier) {\n      params.code_verifier = codeVerifier\n    }\n\n    return params\n  }\n\n  /**\n   * Get headers for token exchange request (can be overridden)\n   * @returns {Object} Request headers\n   */\n  getTokenHeaders() {\n    return {\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': 'Fantasy-Editor/1.0'\n    }\n  }\n\n  /**\n   * Format token request body (can be overridden by providers)\n   * @param {Object} params - Token parameters\n   * @returns {string} Formatted request body\n   */\n  formatTokenRequest(params) {\n    return new URLSearchParams(params).toString()\n  }\n\n  /**\n   * Process token response (can be overridden by providers)\n   * @param {Object} data - Raw token response\n   * @returns {Object} Processed token data\n   */\n  processTokenResponse(data) {\n    return {\n      access_token: data.access_token,\n      token_type: data.token_type || 'Bearer',\n      scope: data.scope,\n      refresh_token: data.refresh_token\n    }\n  }\n\n  /**\n   * Process user data into standardized format (must be implemented)\n   * @param {Object} userData - Raw user data from provider\n   * @returns {Object} Standardized user data\n   */\n  processUserData(userData) {\n    throw new Error('processUserData must be implemented by subclass')\n  }\n\n  /**\n   * Validate provider configuration\n   * @throws {Error} If configuration is invalid\n   */\n  validateConfig() {\n    if (!this.clientId) {\n      throw new Error(`${this.name} client ID is required`)\n    }\n    if (!this.clientSecret) {\n      throw new Error(`${this.name} client secret is required`)\n    }\n    if (!this.redirectUri) {\n      throw new Error(`${this.name} redirect URI is required`)\n    }\n  }\n}", "/**\n * GitHubProvider - GitHub OAuth implementation for Fantasy Editor\n * Handles GitHub OAuth Web Application Flow with PKCE support\n */\nimport { BaseProvider } from './base-provider.js'\n\nexport class GitHubProvider extends BaseProvider {\n  constructor(config = {}) {\n    super({\n      ...config,\n      scopes: config.scopes || ['repo', 'user']\n    })\n  }\n\n  /**\n   * Provider name\n   * @returns {string}\n   */\n  get name() {\n    return 'github'\n  }\n\n  /**\n   * GitHub OAuth authorization URL\n   * @returns {string}\n   */\n  get authorizationUrl() {\n    return 'https://github.com/login/oauth/authorize'\n  }\n\n  /**\n   * GitHub OAuth token exchange URL\n   * @returns {string}\n   */\n  get tokenUrl() {\n    return 'https://github.com/login/oauth/access_token'\n  }\n\n  /**\n   * GitHub user API URL\n   * @returns {string}\n   */\n  get userApiUrl() {\n    return 'https://api.github.com/user'\n  }\n\n  /**\n   * Build GitHub-specific token parameters\n   * GitHub uses grant_type for OAuth Apps vs GitHub Apps\n   * @param {string} code - Authorization code\n   * @param {string} [codeVerifier] - PKCE code verifier\n   * @returns {Object} Token parameters\n   */\n  buildTokenParams(code, codeVerifier = null) {\n    const params = {\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      code: code\n    }\n\n    // GitHub OAuth Apps don't use redirect_uri in token exchange\n    // Only GitHub Apps require it, and we're using OAuth Apps\n    \n    // Add PKCE code verifier if provided\n    if (codeVerifier) {\n      params.code_verifier = codeVerifier\n    }\n\n    return params\n  }\n\n  /**\n   * Process GitHub user data into standardized format\n   * @param {Object} userData - Raw GitHub user data\n   * @returns {Object} Standardized user data\n   */\n  processUserData(userData) {\n    return {\n      id: userData.id,\n      username: userData.login,\n      name: userData.name || userData.login,\n      email: userData.email,\n      avatar: userData.avatar_url,\n      profile: userData.html_url,\n      provider: 'github',\n      raw: userData // Keep full response for advanced features\n    }\n  }\n\n  /**\n   * Get GitHub repositories for the authenticated user\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} List of repositories\n   */\n  async fetchRepositories(accessToken, options = {}) {\n    const {\n      per_page = 100,\n      sort = 'updated',\n      direction = 'desc',\n      type = 'owner'\n    } = options\n\n    const params = new URLSearchParams({\n      per_page: per_page.toString(),\n      sort,\n      direction,\n      type\n    })\n\n    try {\n      const response = await fetch(`https://api.github.com/user/repos?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch repositories: ${response.status}`)\n      }\n\n      const repos = await response.json()\n      return repos.map(repo => ({\n        id: repo.id,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.private,\n        url: repo.html_url,\n        cloneUrl: repo.clone_url,\n        defaultBranch: repo.default_branch,\n        updatedAt: repo.updated_at\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch GitHub repositories: ${error.message}`)\n    }\n  }\n\n  /**\n   * Create a new repository\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} repoConfig - Repository configuration\n   * @returns {Promise<Object>} Created repository data\n   */\n  async createRepository(accessToken, repoConfig) {\n    const {\n      name,\n      description = '',\n      private: isPrivate = false,\n      auto_init = true\n    } = repoConfig\n\n    if (!name) {\n      throw new Error('Repository name is required')\n    }\n\n    try {\n      const response = await fetch('https://api.github.com/user/repos', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify({\n          name,\n          description,\n          private: isPrivate,\n          auto_init\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to create repository: ${error.message || response.status}`)\n      }\n\n      const repo = await response.json()\n      return {\n        id: repo.id,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.private,\n        url: repo.html_url,\n        cloneUrl: repo.clone_url,\n        defaultBranch: repo.default_branch\n      }\n    } catch (error) {\n      throw new Error(`Failed to create GitHub repository: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get file content from repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @param {string} path - File path\n   * @param {string} [branch] - Branch name (defaults to default branch)\n   * @returns {Promise<Object>} File content and metadata\n   */\n  async getFileContent(accessToken, owner, repo, path, branch = null) {\n    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${path}`\n    const params = branch ? `?ref=${branch}` : ''\n\n    try {\n      const response = await fetch(`${url}${params}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('File not found')\n        }\n        throw new Error(`Failed to get file: ${response.status}`)\n      }\n\n      const fileData = await response.json()\n      \n      // Decode base64 content\n      const content = fileData.encoding === 'base64' \n        ? atob(fileData.content.replace(/\\s/g, ''))\n        : fileData.content\n\n      return {\n        content,\n        sha: fileData.sha,\n        path: fileData.path,\n        size: fileData.size,\n        url: fileData.download_url\n      }\n    } catch (error) {\n      throw new Error(`Failed to get GitHub file content: ${error.message}`)\n    }\n  }\n\n  /**\n   * Update or create file in repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @param {string} path - File path\n   * @param {Object} fileData - File data and metadata\n   * @returns {Promise<Object>} Update result\n   */\n  async updateFile(accessToken, owner, repo, path, fileData) {\n    const {\n      content,\n      message,\n      sha = null, // Required for updates, null for creates\n      branch = null\n    } = fileData\n\n    if (!content || !message) {\n      throw new Error('Content and commit message are required')\n    }\n\n    const requestBody = {\n      message,\n      content: btoa(unescape(encodeURIComponent(content))), // Base64 encode with UTF-8 support\n      ...(sha && { sha }), // Include SHA for updates\n      ...(branch && { branch }) // Include branch if specified\n    }\n\n    try {\n      const response = await fetch(`https://api.github.com/repos/${owner}/${repo}/contents/${path}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/vnd.github.v3+json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to update file: ${error.message || response.status}`)\n      }\n\n      const result = await response.json()\n      return {\n        sha: result.content.sha,\n        path: result.content.path,\n        message: result.commit.message,\n        url: result.content.html_url\n      }\n    } catch (error) {\n      throw new Error(`Failed to update GitHub file: ${error.message}`)\n    }\n  }\n}", "/**\n * GitLabProvider - GitLab OAuth implementation for Fantasy Editor\n * Supports both GitLab.com and self-hosted GitLab instances\n */\nimport { BaseProvider } from './base-provider.js'\n\nexport class GitLabProvider extends BaseProvider {\n  constructor(config = {}) {\n    super({\n      ...config,\n      scopes: config.scopes || ['api', 'read_user', 'read_repository', 'write_repository']\n    })\n    \n    // Support custom GitLab instances\n    this.baseUrl = config.baseUrl || 'https://gitlab.com'\n  }\n\n  /**\n   * Provider name\n   * @returns {string}\n   */\n  get name() {\n    return 'gitlab'\n  }\n\n  /**\n   * GitLab OAuth authorization URL\n   * @returns {string}\n   */\n  get authorizationUrl() {\n    return `${this.baseUrl}/oauth/authorize`\n  }\n\n  /**\n   * GitLab OAuth token exchange URL\n   * @returns {string}\n   */\n  get tokenUrl() {\n    return `${this.baseUrl}/oauth/token`\n  }\n\n  /**\n   * GitLab user API URL\n   * @returns {string}\n   */\n  get userApiUrl() {\n    return `${this.baseUrl}/api/v4/user`\n  }\n\n  /**\n   * Build GitLab-specific token parameters\n   * GitLab requires grant_type and redirect_uri\n   * @param {string} code - Authorization code\n   * @param {string} [codeVerifier] - PKCE code verifier\n   * @returns {Object} Token parameters\n   */\n  buildTokenParams(code, codeVerifier = null) {\n    const params = {\n      client_id: this.clientId,\n      client_secret: this.clientSecret,\n      code: code,\n      grant_type: 'authorization_code',\n      redirect_uri: this.redirectUri\n    }\n\n    // Add PKCE code verifier if provided\n    if (codeVerifier) {\n      params.code_verifier = codeVerifier\n    }\n\n    return params\n  }\n\n  /**\n   * Process GitLab user data into standardized format\n   * @param {Object} userData - Raw GitLab user data\n   * @returns {Object} Standardized user data\n   */\n  processUserData(userData) {\n    return {\n      id: userData.id,\n      username: userData.username,\n      name: userData.name || userData.username,\n      email: userData.email,\n      avatar: userData.avatar_url,\n      profile: userData.web_url,\n      provider: 'gitlab',\n      raw: userData\n    }\n  }\n\n  /**\n   * Get GitLab projects for the authenticated user\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} List of projects\n   */\n  async fetchRepositories(accessToken, options = {}) {\n    const {\n      per_page = 100,\n      order_by = 'updated_at',\n      sort = 'desc',\n      membership = true,\n      owned = true\n    } = options\n\n    const params = new URLSearchParams({\n      per_page: per_page.toString(),\n      order_by,\n      sort,\n      membership: membership.toString(),\n      owned: owned.toString()\n    })\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v4/projects?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch projects: ${response.status}`)\n      }\n\n      const projects = await response.json()\n      return projects.map(project => ({\n        id: project.id,\n        name: project.name,\n        fullName: project.path_with_namespace,\n        description: project.description,\n        private: project.visibility === 'private',\n        url: project.web_url,\n        cloneUrl: project.http_url_to_repo,\n        defaultBranch: project.default_branch,\n        updatedAt: project.last_activity_at\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch GitLab projects: ${error.message}`)\n    }\n  }\n\n  /**\n   * Create a new project\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} projectConfig - Project configuration\n   * @returns {Promise<Object>} Created project data\n   */\n  async createRepository(accessToken, projectConfig) {\n    const {\n      name,\n      description = '',\n      private: isPrivate = false,\n      initialize_with_readme = true\n    } = projectConfig\n\n    if (!name) {\n      throw new Error('Project name is required')\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v4/projects`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify({\n          name,\n          description,\n          visibility: isPrivate ? 'private' : 'public',\n          initialize_with_readme\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to create project: ${error.message || response.status}`)\n      }\n\n      const project = await response.json()\n      return {\n        id: project.id,\n        name: project.name,\n        fullName: project.path_with_namespace,\n        description: project.description,\n        private: project.visibility === 'private',\n        url: project.web_url,\n        cloneUrl: project.http_url_to_repo,\n        defaultBranch: project.default_branch\n      }\n    } catch (error) {\n      throw new Error(`Failed to create GitLab project: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get file content from project\n   * @param {string} accessToken - OAuth access token\n   * @param {string} projectId - Project ID or path with namespace\n   * @param {string} path - File path\n   * @param {string} [branch] - Branch name (defaults to default branch)\n   * @returns {Promise<Object>} File content and metadata\n   */\n  async getFileContent(accessToken, projectId, path, branch = 'main') {\n    const encodedPath = encodeURIComponent(path)\n    const encodedProjectId = encodeURIComponent(projectId)\n    \n    try {\n      const response = await fetch(`${this.baseUrl}/api/v4/projects/${encodedProjectId}/repository/files/${encodedPath}?ref=${branch}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('File not found')\n        }\n        throw new Error(`Failed to get file: ${response.status}`)\n      }\n\n      const fileData = await response.json()\n      \n      // Decode base64 content\n      const content = fileData.encoding === 'base64' \n        ? atob(fileData.content)\n        : fileData.content\n\n      return {\n        content,\n        sha: fileData.blob_id,\n        path: fileData.file_path,\n        size: fileData.size,\n        url: null // GitLab doesn't provide direct download URLs in this API\n      }\n    } catch (error) {\n      throw new Error(`Failed to get GitLab file content: ${error.message}`)\n    }\n  }\n\n  /**\n   * Update or create file in project\n   * @param {string} accessToken - OAuth access token\n   * @param {string} projectId - Project ID or path with namespace\n   * @param {string} path - File path\n   * @param {Object} fileData - File data and metadata\n   * @returns {Promise<Object>} Update result\n   */\n  async updateFile(accessToken, projectId, path, fileData) {\n    const {\n      content,\n      message,\n      branch = 'main',\n      action = 'update' // 'create' or 'update'\n    } = fileData\n\n    if (!content || !message) {\n      throw new Error('Content and commit message are required')\n    }\n\n    const encodedPath = encodeURIComponent(path)\n    const encodedProjectId = encodeURIComponent(projectId)\n\n    const requestBody = {\n      branch,\n      commit_message: message,\n      content,\n      encoding: 'text'\n    }\n\n    // For updates, use PUT. For creates, use POST\n    const method = action === 'create' ? 'POST' : 'PUT'\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v4/projects/${encodedProjectId}/repository/files/${encodedPath}`, {\n        method,\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to update file: ${error.message || response.status}`)\n      }\n\n      const result = await response.json()\n      return {\n        sha: result.file_path, // GitLab doesn't return SHA in the same way\n        path: result.file_path,\n        message: message,\n        url: null // Would need to construct from project URL\n      }\n    } catch (error) {\n      throw new Error(`Failed to update GitLab file: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get branches for a project\n   * @param {string} accessToken - OAuth access token\n   * @param {string} projectId - Project ID or path with namespace\n   * @returns {Promise<Array>} List of branches\n   */\n  async getBranches(accessToken, projectId) {\n    const encodedProjectId = encodeURIComponent(projectId)\n\n    try {\n      const response = await fetch(`${this.baseUrl}/api/v4/projects/${encodedProjectId}/repository/branches`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch branches: ${response.status}`)\n      }\n\n      const branches = await response.json()\n      return branches.map(branch => ({\n        name: branch.name,\n        protected: branch.protected,\n        default: branch.default,\n        lastCommit: branch.commit\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch GitLab branches: ${error.message}`)\n    }\n  }\n}", "/**\n * BitbucketProvider - Bitbucket OAuth implementation for Fantasy Editor\n * Supports Bitbucket Cloud (bitbucket.org) OAuth\n */\nimport { BaseProvider } from './base-provider.js'\n\nexport class BitbucketProvider extends BaseProvider {\n  constructor(config = {}) {\n    super({\n      ...config,\n      scopes: config.scopes || ['account', 'repositories:read', 'repositories:write']\n    })\n  }\n\n  /**\n   * Provider name\n   * @returns {string}\n   */\n  get name() {\n    return 'bitbucket'\n  }\n\n  /**\n   * Bitbucket OAuth authorization URL\n   * @returns {string}\n   */\n  get authorizationUrl() {\n    return 'https://bitbucket.org/site/oauth2/authorize'\n  }\n\n  /**\n   * Bitbucket OAuth token exchange URL\n   * @returns {string}\n   */\n  get tokenUrl() {\n    return 'https://bitbucket.org/site/oauth2/access_token'\n  }\n\n  /**\n   * Bitbucket user API URL\n   * @returns {string}\n   */\n  get userApiUrl() {\n    return 'https://api.bitbucket.org/2.0/user'\n  }\n\n  /**\n   * Build Bitbucket-specific token parameters\n   * Bitbucket requires grant_type\n   * @param {string} code - Authorization code\n   * @param {string} [codeVerifier] - PKCE code verifier\n   * @returns {Object} Token parameters\n   */\n  buildTokenParams(code, codeVerifier = null) {\n    const params = {\n      grant_type: 'authorization_code',\n      code: code\n    }\n\n    // Add PKCE code verifier if provided\n    if (codeVerifier) {\n      params.code_verifier = codeVerifier\n    }\n\n    return params\n  }\n\n  /**\n   * Get headers for token exchange request\n   * Bitbucket uses Basic auth with client credentials\n   * @returns {Object} Request headers\n   */\n  getTokenHeaders() {\n    const credentials = btoa(`${this.clientId}:${this.clientSecret}`)\n    \n    return {\n      'Accept': 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${credentials}`,\n      'User-Agent': 'Fantasy-Editor/1.0'\n    }\n  }\n\n  /**\n   * Process Bitbucket token response\n   * @param {Object} data - Raw token response\n   * @returns {Object} Processed token data\n   */\n  processTokenResponse(data) {\n    return {\n      access_token: data.access_token,\n      token_type: data.token_type || 'Bearer',\n      scope: data.scopes, // Bitbucket uses 'scopes' instead of 'scope'\n      refresh_token: data.refresh_token,\n      expires_in: data.expires_in\n    }\n  }\n\n  /**\n   * Process Bitbucket user data into standardized format\n   * @param {Object} userData - Raw Bitbucket user data\n   * @returns {Object} Standardized user data\n   */\n  processUserData(userData) {\n    return {\n      id: userData.account_id,\n      username: userData.username,\n      name: userData.display_name || userData.username,\n      email: null, // Email requires separate API call in Bitbucket\n      avatar: userData.links?.avatar?.href,\n      profile: userData.links?.html?.href,\n      provider: 'bitbucket',\n      raw: userData\n    }\n  }\n\n  /**\n   * Get Bitbucket repositories for the authenticated user\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} List of repositories\n   */\n  async fetchRepositories(accessToken, options = {}) {\n    const {\n      pagelen = 100,\n      sort = '-updated_on',\n      role = 'owner'\n    } = options\n\n    const params = new URLSearchParams({\n      pagelen: pagelen.toString(),\n      sort,\n      role\n    })\n\n    try {\n      const response = await fetch(`https://api.bitbucket.org/2.0/repositories?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch repositories: ${response.status}`)\n      }\n\n      const data = await response.json()\n      return data.values.map(repo => ({\n        id: repo.uuid,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.is_private,\n        url: repo.links.html.href,\n        cloneUrl: repo.links.clone.find(link => link.name === 'https')?.href,\n        defaultBranch: repo.mainbranch?.name || 'main',\n        updatedAt: repo.updated_on\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch Bitbucket repositories: ${error.message}`)\n    }\n  }\n\n  /**\n   * Create a new repository\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} repoConfig - Repository configuration\n   * @returns {Promise<Object>} Created repository data\n   */\n  async createRepository(accessToken, repoConfig) {\n    const {\n      name,\n      description = '',\n      private: isPrivate = false,\n      has_wiki = false,\n      has_issues = true\n    } = repoConfig\n\n    if (!name) {\n      throw new Error('Repository name is required')\n    }\n\n    // Get current user to create repository under their workspace\n    const userResponse = await fetch(this.userApiUrl, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Accept': 'application/json'\n      }\n    })\n\n    if (!userResponse.ok) {\n      throw new Error('Failed to get current user')\n    }\n\n    const user = await userResponse.json()\n    const workspace = user.username\n\n    try {\n      const response = await fetch(`https://api.bitbucket.org/2.0/repositories/${workspace}/${name}`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify({\n          name,\n          description,\n          is_private: isPrivate,\n          has_wiki,\n          has_issues,\n          scm: 'git'\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to create repository: ${error.error?.message || response.status}`)\n      }\n\n      const repo = await response.json()\n      return {\n        id: repo.uuid,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.is_private,\n        url: repo.links.html.href,\n        cloneUrl: repo.links.clone.find(link => link.name === 'https')?.href,\n        defaultBranch: repo.mainbranch?.name || 'main'\n      }\n    } catch (error) {\n      throw new Error(`Failed to create Bitbucket repository: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get file content from repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} workspace - Workspace name\n   * @param {string} repoSlug - Repository slug\n   * @param {string} path - File path\n   * @param {string} [branch] - Branch name (defaults to main)\n   * @returns {Promise<Object>} File content and metadata\n   */\n  async getFileContent(accessToken, workspace, repoSlug, path, branch = 'main') {\n    const encodedPath = encodeURIComponent(path)\n\n    try {\n      const response = await fetch(`https://api.bitbucket.org/2.0/repositories/${workspace}/${repoSlug}/src/${branch}/${encodedPath}`, {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('File not found')\n        }\n        throw new Error(`Failed to get file: ${response.status}`)\n      }\n\n      // Bitbucket returns raw content, not JSON\n      const content = await response.text()\n      \n      return {\n        content,\n        sha: null, // Bitbucket doesn't provide SHA in this endpoint\n        path: path,\n        size: content.length,\n        url: `https://bitbucket.org/${workspace}/${repoSlug}/src/${branch}/${path}`\n      }\n    } catch (error) {\n      throw new Error(`Failed to get Bitbucket file content: ${error.message}`)\n    }\n  }\n\n  /**\n   * Update or create file in repository\n   * Note: Bitbucket API requires a more complex approach for file operations\n   * This is a simplified implementation\n   * @param {string} accessToken - OAuth access token\n   * @param {string} workspace - Workspace name\n   * @param {string} repoSlug - Repository slug\n   * @param {string} path - File path\n   * @param {Object} fileData - File data and metadata\n   * @returns {Promise<Object>} Update result\n   */\n  async updateFile(accessToken, workspace, repoSlug, path, fileData) {\n    const {\n      content,\n      message,\n      branch = 'main'\n    } = fileData\n\n    if (!content || !message) {\n      throw new Error('Content and commit message are required')\n    }\n\n    // Bitbucket uses form data for file uploads\n    const formData = new FormData()\n    formData.append(path, new Blob([content], { type: 'text/plain' }))\n    formData.append('message', message)\n    formData.append('branch', branch)\n\n    try {\n      const response = await fetch(`https://api.bitbucket.org/2.0/repositories/${workspace}/${repoSlug}/src`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'User-Agent': 'Fantasy-Editor/1.0'\n          // Don't set Content-Type for FormData - browser will set it with boundary\n        },\n        body: formData\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to update file: ${error.error?.message || response.status}`)\n      }\n\n      // Bitbucket returns commit information\n      const result = await response.json()\n      return {\n        sha: result.hash,\n        path: path,\n        message: message,\n        url: `https://bitbucket.org/${workspace}/${repoSlug}/src/${result.hash}/${path}`\n      }\n    } catch (error) {\n      throw new Error(`Failed to update Bitbucket file: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get user's email address (requires separate API call in Bitbucket)\n   * @param {string} accessToken - OAuth access token\n   * @returns {Promise<string|null>} Primary email address\n   */\n  async getUserEmail(accessToken) {\n    try {\n      const response = await fetch('https://api.bitbucket.org/2.0/user/emails', {\n        headers: {\n          'Authorization': `Bearer ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        return null // Email access might not be granted\n      }\n\n      const data = await response.json()\n      const primaryEmail = data.values.find(email => email.is_primary)\n      return primaryEmail ? primaryEmail.email : null\n    } catch (error) {\n      return null // Fail silently for email\n    }\n  }\n}", "/**\n * GenericGitProvider - Generic OAuth implementation for self-hosted Git providers\n * Supports Gitea, Forgejo, and other Git providers with configurable endpoints\n */\nimport { BaseProvider } from './base-provider.js'\n\nexport class GenericGitProvider extends BaseProvider {\n  constructor(config = {}) {\n    super({\n      ...config,\n      scopes: config.scopes || ['repo', 'user:email']\n    })\n    \n    // Required: base URL of the Git provider\n    this.baseUrl = config.baseUrl\n    if (!this.baseUrl) {\n      throw new Error('Base URL is required for generic Git provider')\n    }\n    \n    // Optional: custom API paths (defaults work for Gitea/Forgejo)\n    this.apiPath = config.apiPath || '/api/v1'\n    this.oauthPath = config.oauthPath || '/login/oauth'\n    \n    // Provider identification\n    this.providerName = config.providerName || 'git'\n    this.providerDisplayName = config.providerDisplayName || 'Git Provider'\n  }\n\n  /**\n   * Provider name\n   * @returns {string}\n   */\n  get name() {\n    return this.providerName\n  }\n\n  /**\n   * OAuth authorization URL\n   * @returns {string}\n   */\n  get authorizationUrl() {\n    return `${this.baseUrl}${this.oauthPath}/authorize`\n  }\n\n  /**\n   * OAuth token exchange URL\n   * @returns {string}\n   */\n  get tokenUrl() {\n    return `${this.baseUrl}${this.oauthPath}/access_token`\n  }\n\n  /**\n   * User API URL\n   * @returns {string}\n   */\n  get userApiUrl() {\n    return `${this.baseUrl}${this.apiPath}/user`\n  }\n\n  /**\n   * Process user data into standardized format\n   * Most Git providers follow GitHub-like API structure\n   * @param {Object} userData - Raw user data\n   * @returns {Object} Standardized user data\n   */\n  processUserData(userData) {\n    return {\n      id: userData.id,\n      username: userData.login || userData.username,\n      name: userData.full_name || userData.name || userData.login || userData.username,\n      email: userData.email,\n      avatar: userData.avatar_url,\n      profile: `${this.baseUrl}/${userData.login || userData.username}`,\n      provider: this.providerName,\n      raw: userData\n    }\n  }\n\n  /**\n   * Get repositories for the authenticated user\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} options - Query options\n   * @returns {Promise<Array>} List of repositories\n   */\n  async fetchRepositories(accessToken, options = {}) {\n    const {\n      limit = 100,\n      sort = 'updated',\n      order = 'desc'\n    } = options\n\n    const params = new URLSearchParams({\n      limit: limit.toString(),\n      sort,\n      order\n    })\n\n    try {\n      const response = await fetch(`${this.baseUrl}${this.apiPath}/user/repos?${params}`, {\n        headers: {\n          'Authorization': `token ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch repositories: ${response.status}`)\n      }\n\n      const repos = await response.json()\n      return repos.map(repo => ({\n        id: repo.id,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.private,\n        url: repo.html_url,\n        cloneUrl: repo.clone_url,\n        defaultBranch: repo.default_branch,\n        updatedAt: repo.updated_at\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch ${this.providerDisplayName} repositories: ${error.message}`)\n    }\n  }\n\n  /**\n   * Create a new repository\n   * @param {string} accessToken - OAuth access token\n   * @param {Object} repoConfig - Repository configuration\n   * @returns {Promise<Object>} Created repository data\n   */\n  async createRepository(accessToken, repoConfig) {\n    const {\n      name,\n      description = '',\n      private: isPrivate = false,\n      auto_init = true,\n      gitignores = '',\n      license = '',\n      readme = 'Default'\n    } = repoConfig\n\n    if (!name) {\n      throw new Error('Repository name is required')\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}${this.apiPath}/user/repos`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `token ${accessToken}`,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify({\n          name,\n          description,\n          private: isPrivate,\n          auto_init,\n          gitignores,\n          license,\n          readme\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to create repository: ${error.message || response.status}`)\n      }\n\n      const repo = await response.json()\n      return {\n        id: repo.id,\n        name: repo.name,\n        fullName: repo.full_name,\n        description: repo.description,\n        private: repo.private,\n        url: repo.html_url,\n        cloneUrl: repo.clone_url,\n        defaultBranch: repo.default_branch\n      }\n    } catch (error) {\n      throw new Error(`Failed to create ${this.providerDisplayName} repository: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get file content from repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @param {string} path - File path\n   * @param {string} [ref] - Branch/tag/commit reference\n   * @returns {Promise<Object>} File content and metadata\n   */\n  async getFileContent(accessToken, owner, repo, path, ref = null) {\n    const encodedPath = encodeURIComponent(path)\n    const refParam = ref ? `?ref=${ref}` : ''\n\n    try {\n      const response = await fetch(`${this.baseUrl}${this.apiPath}/repos/${owner}/${repo}/contents/${encodedPath}${refParam}`, {\n        headers: {\n          'Authorization': `token ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('File not found')\n        }\n        throw new Error(`Failed to get file: ${response.status}`)\n      }\n\n      const fileData = await response.json()\n      \n      // Decode base64 content\n      const content = fileData.encoding === 'base64' \n        ? atob(fileData.content.replace(/\\s/g, ''))\n        : fileData.content\n\n      return {\n        content,\n        sha: fileData.sha,\n        path: fileData.path,\n        size: fileData.size,\n        url: fileData.download_url\n      }\n    } catch (error) {\n      throw new Error(`Failed to get ${this.providerDisplayName} file content: ${error.message}`)\n    }\n  }\n\n  /**\n   * Update or create file in repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @param {string} path - File path\n   * @param {Object} fileData - File data and metadata\n   * @returns {Promise<Object>} Update result\n   */\n  async updateFile(accessToken, owner, repo, path, fileData) {\n    const {\n      content,\n      message,\n      sha = null, // Required for updates, null for creates\n      branch = null\n    } = fileData\n\n    if (!content || !message) {\n      throw new Error('Content and commit message are required')\n    }\n\n    const encodedPath = encodeURIComponent(path)\n    \n    const requestBody = {\n      message,\n      content: btoa(unescape(encodeURIComponent(content))), // Base64 encode with UTF-8 support\n      ...(sha && { sha }), // Include SHA for updates\n      ...(branch && { branch }) // Include branch if specified\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}${this.apiPath}/repos/${owner}/${repo}/contents/${encodedPath}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `token ${accessToken}`,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        },\n        body: JSON.stringify(requestBody)\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(`Failed to update file: ${error.message || response.status}`)\n      }\n\n      const result = await response.json()\n      return {\n        sha: result.content.sha,\n        path: result.content.path,\n        message: result.commit.message,\n        url: result.content.html_url\n      }\n    } catch (error) {\n      throw new Error(`Failed to update ${this.providerDisplayName} file: ${error.message}`)\n    }\n  }\n\n  /**\n   * Get branches for a repository\n   * @param {string} accessToken - OAuth access token\n   * @param {string} owner - Repository owner\n   * @param {string} repo - Repository name\n   * @returns {Promise<Array>} List of branches\n   */\n  async getBranches(accessToken, owner, repo) {\n    try {\n      const response = await fetch(`${this.baseUrl}${this.apiPath}/repos/${owner}/${repo}/branches`, {\n        headers: {\n          'Authorization': `token ${accessToken}`,\n          'Accept': 'application/json',\n          'User-Agent': 'Fantasy-Editor/1.0'\n        }\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch branches: ${response.status}`)\n      }\n\n      const branches = await response.json()\n      return branches.map(branch => ({\n        name: branch.name,\n        protected: branch.protected || false,\n        commit: branch.commit\n      }))\n    } catch (error) {\n      throw new Error(`Failed to fetch ${this.providerDisplayName} branches: ${error.message}`)\n    }\n  }\n\n  /**\n   * Validate generic Git provider configuration\n   * @throws {Error} If configuration is invalid\n   */\n  validateConfig() {\n    super.validateConfig()\n    \n    if (!this.baseUrl) {\n      throw new Error('Base URL is required for generic Git provider')\n    }\n    \n    // Validate URL format\n    try {\n      new URL(this.baseUrl)\n    } catch {\n      throw new Error('Base URL must be a valid URL')\n    }\n  }\n\n  /**\n   * Factory method to create common Git provider instances\n   * @param {string} providerType - Type of provider (gitea, forgejo, etc.)\n   * @param {Object} config - Provider configuration\n   * @returns {GenericGitProvider} Configured provider instance\n   */\n  static createProvider(providerType, config) {\n    const providerConfigs = {\n      gitea: {\n        providerName: 'gitea',\n        providerDisplayName: 'Gitea',\n        apiPath: '/api/v1',\n        oauthPath: '/login/oauth'\n      },\n      forgejo: {\n        providerName: 'forgejo', \n        providerDisplayName: 'Forgejo',\n        apiPath: '/api/v1',\n        oauthPath: '/login/oauth'\n      },\n      codeberg: {\n        providerName: 'codeberg',\n        providerDisplayName: 'Codeberg',\n        baseUrl: 'https://codeberg.org',\n        apiPath: '/api/v1',\n        oauthPath: '/login/oauth'\n      }\n    }\n\n    const providerConfig = providerConfigs[providerType]\n    if (!providerConfig) {\n      throw new Error(`Unknown provider type: ${providerType}`)\n    }\n\n    return new GenericGitProvider({\n      ...providerConfig,\n      ...config\n    })\n  }\n}", "/**\n * Multi-Provider OAuth Proxy Worker for Fantasy Editor\n * Handles OAuth token exchange for GitHub, GitLab, Bitbucket, and generic Git providers\n * Deployed as Cloudflare Worker to enable client-side app OAuth integration\n */\n\nimport { GitHubProvider } from './providers/github.js'\nimport { GitLabProvider } from './providers/gitlab.js'\nimport { BitbucketProvider } from './providers/bitbucket.js'\nimport { GenericGitProvider } from './providers/generic-git.js'\n\n/**\n * Provider factory - creates provider instances based on type\n * @param {string} providerType - Provider type (github, gitlab, bitbucket, generic)\n * @param {Object} config - Provider configuration\n * @returns {BaseProvider} Provider instance\n */\nfunction createProvider(providerType, config) {\n  const providers = {\n    github: GitHubProvider,\n    gitlab: GitLabProvider,\n    bitbucket: BitbucketProvider,\n    generic: GenericGitProvider\n  }\n\n  const ProviderClass = providers[providerType]\n  if (!ProviderClass) {\n    throw new Error(`Unsupported provider type: ${providerType}`)\n  }\n\n  return new ProviderClass(config)\n}\n\n/**\n * Get provider configuration from environment variables\n * @param {string} providerType - Provider type\n * @param {Object} env - Environment variables\n * @returns {Object} Provider configuration\n */\nfunction getProviderConfig(providerType, env) {\n  const baseConfig = {\n    clientId: env[`${providerType.toUpperCase()}_CLIENT_ID`],\n    clientSecret: env[`${providerType.toUpperCase()}_CLIENT_SECRET`],\n    redirectUri: env.OAUTH_REDIRECT_URI || 'https://forgewright.io/'\n  }\n\n  // Provider-specific configurations\n  const configs = {\n    github: baseConfig,\n    gitlab: {\n      ...baseConfig,\n      baseUrl: env.GITLAB_BASE_URL || 'https://gitlab.com'\n    },\n    bitbucket: baseConfig,\n    generic: {\n      ...baseConfig,\n      baseUrl: env.GENERIC_GIT_BASE_URL,\n      providerName: env.GENERIC_GIT_PROVIDER_NAME,\n      providerDisplayName: env.GENERIC_GIT_DISPLAY_NAME\n    }\n  }\n\n  const config = configs[providerType]\n  if (!config.clientId || !config.clientSecret) {\n    throw new Error(`Missing ${providerType} OAuth credentials`)\n  }\n\n  return config\n}\n\n/**\n * Handle OAuth token exchange request\n * @param {Request} request - Incoming request\n * @param {Object} env - Environment variables\n * @returns {Response} Token response or error\n */\nasync function handleTokenExchange(request, env) {\n  if (request.method !== 'POST') {\n    return new Response('Method not allowed', { status: 405 })\n  }\n\n  try {\n    const { provider, code, codeVerifier, providerConfig } = await request.json()\n    \n    if (!provider || !code) {\n      return new Response('Missing required parameters', { status: 400 })\n    }\n\n    // Get provider configuration\n    const config = providerConfig \n      ? { ...getProviderConfig(provider, env), ...providerConfig }\n      : getProviderConfig(provider, env)\n\n    // Create provider instance\n    const providerInstance = createProvider(provider, config)\n    \n    // Validate configuration\n    providerInstance.validateConfig()\n\n    // Exchange code for token\n    const tokenData = await providerInstance.exchangeCodeForToken(code, codeVerifier)\n\n    return new Response(JSON.stringify(tokenData), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    })\n\n  } catch (error) {\n    console.error('Token exchange error:', error)\n    return new Response(JSON.stringify({ \n      error: 'Token exchange failed',\n      details: error.message \n    }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io'\n      }\n    })\n  }\n}\n\n/**\n * Handle user info fetch request\n * @param {Request} request - Incoming request\n * @param {Object} env - Environment variables\n * @returns {Response} User info response or error\n */\nasync function handleUserInfo(request, env) {\n  if (request.method !== 'POST') {\n    return new Response('Method not allowed', { status: 405 })\n  }\n\n  try {\n    const { provider, accessToken, providerConfig } = await request.json()\n    \n    if (!provider || !accessToken) {\n      return new Response('Missing required parameters', { status: 400 })\n    }\n\n    // Get provider configuration\n    const config = providerConfig \n      ? { ...getProviderConfig(provider, env), ...providerConfig }\n      : getProviderConfig(provider, env)\n\n    // Create provider instance\n    const providerInstance = createProvider(provider, config)\n    \n    // Fetch user info\n    const userData = await providerInstance.fetchUserInfo(accessToken)\n\n    return new Response(JSON.stringify(userData), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    })\n\n  } catch (error) {\n    console.error('User info fetch error:', error)\n    return new Response(JSON.stringify({ \n      error: 'User info fetch failed',\n      details: error.message \n    }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io'\n      }\n    })\n  }\n}\n\n/**\n * Handle repository operations request\n * @param {Request} request - Incoming request\n * @param {Object} env - Environment variables\n * @returns {Response} Repository data response or error\n */\nasync function handleRepositoryOps(request, env) {\n  if (request.method !== 'POST') {\n    return new Response('Method not allowed', { status: 405 })\n  }\n\n  try {\n    const { provider, operation, accessToken, providerConfig, ...params } = await request.json()\n    \n    if (!provider || !operation || !accessToken) {\n      return new Response('Missing required parameters', { status: 400 })\n    }\n\n    // Get provider configuration\n    const config = providerConfig \n      ? { ...getProviderConfig(provider, env), ...providerConfig }\n      : getProviderConfig(provider, env)\n\n    // Create provider instance\n    const providerInstance = createProvider(provider, config)\n    \n    // Execute repository operation\n    let result\n    switch (operation) {\n      case 'fetchRepositories':\n        result = await providerInstance.fetchRepositories(accessToken, params.options)\n        break\n      case 'createRepository':\n        result = await providerInstance.createRepository(accessToken, params.repoConfig)\n        break\n      case 'getFileContent':\n        result = await providerInstance.getFileContent(\n          accessToken, params.owner, params.repo, params.path, params.ref\n        )\n        break\n      case 'updateFile':\n        result = await providerInstance.updateFile(\n          accessToken, params.owner, params.repo, params.path, params.fileData\n        )\n        break\n      case 'getBranches':\n        result = await providerInstance.getBranches(accessToken, params.owner, params.repo)\n        break\n      default:\n        throw new Error(`Unsupported operation: ${operation}`)\n    }\n\n    return new Response(JSON.stringify(result), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io',\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type'\n      }\n    })\n\n  } catch (error) {\n    console.error('Repository operation error:', error)\n    return new Response(JSON.stringify({ \n      error: 'Repository operation failed',\n      details: error.message \n    }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io'\n      }\n    })\n  }\n}\n\n/**\n * Handle CORS preflight requests\n * @param {Object} env - Environment variables\n * @returns {Response} CORS response\n */\nfunction handleCORS(env) {\n  return new Response(null, {\n    headers: {\n      'Access-Control-Allow-Origin': env.CORS_ORIGIN || 'https://forgewright.io',\n      'Access-Control-Allow-Methods': 'POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n      'Access-Control-Max-Age': '86400'\n    }\n  })\n}\n\n/**\n * Main Worker fetch handler\n * @param {Request} request - Incoming request\n * @param {Object} env - Environment variables\n * @param {Object} ctx - Execution context\n * @returns {Response} Response\n */\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url)\n    \n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return handleCORS(env)\n    }\n\n    // Route requests based on path\n    switch (url.pathname) {\n      case '/oauth/token':\n        return handleTokenExchange(request, env)\n      \n      case '/oauth/user':\n        return handleUserInfo(request, env)\n      \n      case '/oauth/repos':\n        return handleRepositoryOps(request, env)\n      \n      case '/health':\n        return new Response(JSON.stringify({ \n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          providers: ['github', 'gitlab', 'bitbucket', 'generic']\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        })\n      \n      default:\n        return new Response('Not Found', { status: 404 })\n    }\n  }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/oauth-proxy.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/oauth-proxy.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/.wrangler/tmp/bundle-obXeUO/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/.wrangler/tmp/bundle-obXeUO/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/wellingtongranja/Projects/Personal/fantasy-forgewright/workers/.wrangler/tmp/bundle-obXeUO/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
